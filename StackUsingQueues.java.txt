class MyStack {

    Queue<Integer> q = new LinkedList<>();
    
    /** Initialize your data structure here. */
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        q.offer(x); //offer method will place the element at the end of the queue
        //put all the elements to the back of the queue -> in the order of which they were inserted, this creates the           //stack LIFO arrangement
        for(int i=1;i<q.size();i++)
            q.offer(q.poll());
        
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return q.poll(); //returns the first element of the queue(list)
    }
    
    /** Get the top element. */
    public int top() {
        return q.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return q.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */